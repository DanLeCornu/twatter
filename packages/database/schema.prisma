generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  output          = "./node_modules/@generated"
  emitOnly        = "inputs,enums,crudResolvers"
  useSimpleInputs = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum DobPrivacy {
  PUBLIC
  FOLLOWERS
  FOLLOWING
  MUTUAL_FOLLOW
  PRIVATE
}

enum AllowMessagesFrom {
  NO_ONE
  EVERYONE
}

enum ReportType {
  HATE
  ABUSE
  VIOLENT
  CHILD_SAFETY
  PRIVACY
  SPAM
  SELF_HARM
  DISTURBING
  DECEPTIVE
  EXTREMISM
}

enum NotificationType {
  NEW_MESSAGE
  NEW_FOLLOW
  NEW_LIKE
  NEW_REPLY
  NEW_MENTION
}

enum NotificationStatus {
  READ
  UNREAD
}

model User {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String            @unique
  /// @TypeGraphQL.omit(output: true)
  password           String?
  role               Role              @default(USER)
  name               String            @db.VarChar(50)
  handle             String?           @unique @db.VarChar(15)
  avatar             String?
  cover              String?
  bio                String?           @db.VarChar(160)
  location           String?           @db.VarChar(30)
  website            String?           @db.VarChar(100)
  dob                String?
  dobDayMonthPrivacy DobPrivacy        @default(PRIVATE)
  dobYearPrivacy     DobPrivacy        @default(PRIVATE)
  allowMessagesFrom  AllowMessagesFrom @default(NO_ONE)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  archivedAt         DateTime?         @db.Timestamptz(6)

  pinnedPost             Post?          @relation(name: "PinnedPost", fields: [pinnedPostId], references: [id])
  pinnedPostId           String?        @unique @db.Uuid
  posts                  Post[]
  createdReports         Report[]       @relation(name: "ReportCreator")
  reports                Report[]       @relation(name: "UserReports")
  views                  View[]
  likes                  Like[]
  bookmarks              Bookmark[]
  notifications          Notification[] @relation("NotificationUser")
  notificationInitiators Notification[] @relation("NotificationInitiator")
  followers              User[]         @relation("UserFollowers")
  following              User[]         @relation("UserFollowers")
  mutedAccounts          User[]         @relation("MutedAccounts")
  mutedBy                User[]         @relation("MutedAccounts")
  blockedAccounts        User[]         @relation("BlockedAccounts")
  blockedBy              User[]         @relation("BlockedAccounts")
  messagesSent           Message[]      @relation("MessagesSent")
  messagesReceived       Message[]      @relation("MessagesReceived")
  mentions               Mention[]
  searches               Search[]
}

model Post {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String
  image      String?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  archivedAt DateTime? @db.Timestamptz(6)

  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.Uuid
  pinnedUser    User?          @relation(name: "PinnedPost")
  reports       Report[]
  parentId      String?        @db.Uuid
  parent        Post?          @relation(name: "PostReplies", fields: [parentId], references: [id])
  replies       Post[]         @relation("PostReplies")
  views         View[]
  likes         Like[]
  bookmarks     Bookmark[]
  tags          Tag[]
  mentions      Mention[]
  notifications Notification[]
}

model View {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model Like {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@unique([postId, userId])
}

model Bookmark {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@unique([postId, userId])
}

model Notification {
  id     String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type   NotificationType
  status NotificationStatus @default(UNREAD)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  initiator   User     @relation(name: "NotificationInitiator", fields: [initiatorId], references: [id])
  initiatorId String   @db.Uuid
  user        User     @relation(name: "NotificationUser", fields: [userId], references: [id])
  userId      String   @db.Uuid
  message     Message? @relation(fields: [messageId], references: [id])
  messageId   String?  @db.Uuid
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?  @db.Uuid
}

model Message {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text        String
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  archivedAtA DateTime? @db.Timestamptz(6)
  archivedAtB DateTime? @db.Timestamptz(6)

  archivedByAId String?        @db.Uuid
  archivedByBId String?        @db.Uuid
  sender        User           @relation(name: "MessagesSent", fields: [senderId], references: [id])
  senderId      String         @db.Uuid
  receiver      User           @relation(name: "MessagesReceived", fields: [receiverId], references: [id])
  receiverId    String         @db.Uuid
  reports       Report[]
  notifications Notification[]
}

model Report {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      ReportType
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamptz(6)

  creator   User     @relation(name: "ReportCreator", fields: [creatorId], references: [id])
  creatorId String   @db.Uuid
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.Uuid
  user      User?    @relation(name: "UserReports", fields: [userId], references: [id])
  userId    String?  @db.Uuid
  message   Message? @relation(fields: [messageId], references: [id])
  messageId String?  @db.Uuid
}

model Verification {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  email            String
  dob              String
  verificationCode String    @unique
  verifiedAt       DateTime? @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model Mention {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model Search {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String
  hidden    Boolean  @default(false)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}
